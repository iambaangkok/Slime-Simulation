#pragma kernel Update

struct Agent {
	float2 position;
	float angle;
	int4 speciesMask;
	int speciesIndex;
};

struct SpeciesSettings {
	float moveSpeed;
	float turnSpeed;

	float sensorAngleDegrees;
	float sensorOffsetDst;
	int sensorSize;
	float4 colour;
};

StructuredBuffer<SpeciesSettings> speciesSettings;
uint numSpecies;

RWStructuredBuffer<Agent> agents;
uint numAgents;

RWTexture2D<float4> TrailMap;
RWTexture2D<float4> WallMask;
int width;
int height;

float trailWeight;

float deltaTime;
float time;

uint hash(uint state)
{
	state ^= 2747636419u;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	state ^= state >> 16;
	state *= 2654435769u;
	return state;
}

float scaleToRange01(uint state)
{
	return state / 4294967295.0;
}

[numthreads(16, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	if (id.x >= numAgents) {
		return;
	}

	Agent agent = agents[id.x];
	SpeciesSettings settings = speciesSettings[agent.speciesIndex];
	float2 pos = agent.position;

	uint random = hash(pos.y * width + pos.x + hash(id.x + time * 100000));

	// Steer

	// Update position
	float2 direction = float2(cos(agent.angle), sin(agent.angle));
	float2 newPos = agent.position + direction * deltaTime * settings.moveSpeed;

	// Clamp position & wall bounce
	if (WallMask[int2(newPos)].x == 0) {
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		agents[id.x].angle = randomAngle;
		newPos = agents[id.x].position;
	}
	else if (newPos.x < 0 || newPos.x >= width || newPos.y < 0 || newPos.y >= height) {
		random = hash(random);
		float randomAngle = scaleToRange01(random) * 2 * 3.1415;

		newPos.x = min(width - 1, max(0, newPos.x));
		newPos.y = min(height - 1, max(0, newPos.y));
		agents[id.x].angle = randomAngle;
	}
	else {
		int2 coord = int2(newPos);
		float4 oldTrail = TrailMap[coord];
		TrailMap[coord] = min(1, oldTrail + agent.speciesMask * trailWeight * deltaTime);
	}
	agents[id.x].position = newPos;

}

#pragma kernel Diffuse

float decayRate;
float diffuseRate;
RWTexture2D<float4> DiffusedTrailMap;
RWTexture2D<float4> DiffusedWallMask;
[numthreads(8, 8, 1)]
void Diffuse(uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height || DiffusedWallMask[id.xy].x == 0) {
		return;
	}

	float4 sum = 0;
	float4 originalCol = TrailMap[id.xy];
	// 3x3 blur
	for (int offsetX = -1; offsetX <= 1; offsetX++) {
		for (int offsetY = -1; offsetY <= 1; offsetY++) {
			int sampleX = min(width - 1, max(0, id.x + offsetX));
			int sampleY = min(height - 1, max(0, id.y + offsetY));
			sum += TrailMap[int2(sampleX, sampleY)];
		}
	}

	float4 blurredCol = sum / 9;
	float diffuseWeight = saturate(diffuseRate * deltaTime);
	blurredCol = originalCol * (1 - diffuseWeight) + blurredCol * (diffuseWeight);

	//DiffusedTrailMap[id.xy] = blurredCol * saturate(1 - decayRate * deltaTime);
	DiffusedTrailMap[id.xy] = max(0, blurredCol - decayRate * deltaTime);
}

#pragma kernel UpdateColourMap
RWTexture2D<float4> ColourMap;
RWTexture2D<float4> ColourWallMask;

[numthreads(8, 8, 1)]
void UpdateColourMap(uint3 id : SV_DispatchThreadID)
{
	if (id.x < 0 || id.x >= (uint)width || id.y < 0 || id.y >= (uint)height || ColourWallMask[id.xy].x == 0) {
		return;
	}

	float4 map = TrailMap[id.xy];

	float4 colour = 0;
	for (uint i = 0; i < numSpecies; i++) {
		float4 mask = float4(i == 0, i == 1, i == 2, i == 3);
		colour += speciesSettings[i].colour * dot(map, mask);
	}
	ColourMap[id.xy] = colour;

}